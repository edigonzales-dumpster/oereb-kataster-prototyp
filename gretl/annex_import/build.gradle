import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

def pathToTempFolder = System.getProperty("java.io.tmpdir")

def annexDataSets = [
        "ch.so.agi.OeREB_extractAnnex-Stammdaten",
        "ch.so.agi.OeREB_extractAnnex-KatatasterAmt",
        "ch.so.agi.OeREB_extractAnnex-AktiveGemeinden"
    ]

def annexBaseUrl = "https://dl.bintray.com/sogis/ch.so.agi.oereb-data/"

def GROUP = "Annexdaten-Import"

annexDataSets.each { annexDataSet ->
    def dataSet = annexDataSet.toString()
    task "downloadAnnexData_$dataSet"(type: Download) {
        group = GROUP
        description = "Download Annex-Datensatz: ${dataSet}"
        src annexBaseUrl + dataSet + ".xtf"
        dest pathToTempFolder
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }

    task "replaceAnnexData_$dataSet"(type: Ili2pgReplace, dependsOn: "downloadAnnexData_$dataSet") {
        group = GROUP
        description = "Import Annex-Datensatz: ${dataSet}"
        database = [dbUriOereb, dbUserOereb, dbPwdOereb]
        models = iliModelAnnex
        dbschema = dbSchema
        dataFile = file(Paths.get(pathToTempFolder.toString(), dataSet + ".xtf"))
        dataset = dataSet
        disableValidation = true

        doLast {
            println "Data imported into db: " + dbUriOereb
        }        
    }
}

task replaceAnnexData() {
    group = GROUP
    description = "Aggregationstask für das Importieren/Ersetzen sämtlicher Annex-Daten."
}

replaceAnnexData.dependsOn {
    tasks.findAll { task -> task.name.startsWith('replaceAnnexData_') }
}