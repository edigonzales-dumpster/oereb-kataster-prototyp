import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

def pathToTempFolder = System.getProperty("java.io.tmpdir")

//def cadastralSurveyingDataSets = [2401,2402,2403,2404,2405,2406,2407,2408,2421,2422,2423,2424,2425,2426,2427,2428,2429,2445,2455,2456,2457,2461,2463,2464,2465,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2491,2492,2493,2495,2497,2498,2499,2500,2501,2502,2503,2511,2513,2514,2516,2517,2518,2519,2520,2523,2524,2525,2526,2527,2528,2529,2530,2532,2534,2535,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2553,2554,2555,2556,2571,2572,2573,2574,2575,2576,2578,2579,2580,2581,2582,2583,2584,2585,2586,2601,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622]
def cadastralSurveyingDataSets = ["2405", "2408", "2457", "2473", "2474", "2476", "2498", "2501", "2502", "2580", "2613", "2614", "2615"]
def cadastralSurveyingBaseUrl = "https://s3.eu-central-1.amazonaws.com/ch.so.agi.av.dm01avch24lv95d-test/"

def GROUP = "AV-Import"

cadastralSurveyingDataSets.each { cadastralSurveyingDataSet ->
    def dataSet = cadastralSurveyingDataSet.toString()
    task "downloadCadastralSurveyingData_$dataSet"(type: Download) {
        group = GROUP
        description = "Download AV-Datensatz: ${dataSet}"
        src cadastralSurveyingBaseUrl + dataSet + "00.itf"
        dest pathToTempFolder
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }

    task "replaceCadastralSurveyingData_$dataSet"(type: Ili2pgReplace, dependsOn: "downloadCadastralSurveyingData_$dataSet") {
        group = GROUP
        description = "Import AV-Datensatz: ${dataSet}"
        database = [dbUriOereb, dbUserOereb, dbPwdOereb]
        models = iliModelAmtlicheVermessung
        dbschema = dbSchema
        dataFile = file(Paths.get(pathToTempFolder.toString(), dataSet + "00.itf"))
        dataset = dataSet
        disableValidation = true

        doLast {
            println "Data imported into db: " + dbUriOereb
        }        
    }
}

task replaceCadastralSurveyingData() {
    group = GROUP
    description = "Aggregationstask für das Importieren/Ersetzen sämtlicher AV-Daten."
}

replaceCadastralSurveyingData.dependsOn {
    tasks.findAll { task -> task.name.startsWith('replaceCadastralSurveyingData_') }
}
