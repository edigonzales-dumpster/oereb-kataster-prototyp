import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, "unzip_data")
def pathToDataZip = Paths.get(pathToTempFolder, "data.zip")

def federalDataSets = [
        "ch.astra.baulinien-nationalstrassen.oereb",
        "ch.astra.projektierungszonen-nationalstrassen.oereb", // no data available
        "ch.bav.baulinien-eisenbahnanlagen.oereb", // no data available 
        "ch.bav.projektierungszonen-eisenbahnanlagen.oereb", // no data available 
        "ch.bazl.baulinien-flughafenanlagen.oereb", // no data available 
        "ch.bazl.projektierungszonen-flughafenanlagen.oereb",
        "ch.bav.kataster-belasteter-standorte-oev.oereb",
        "ch.bazl.kataster-belasteter-standorte-zivilflugplaetze.oereb",
        "ch.bazl.sicherheitszonenplan.oereb"
    ]

def federalBaseUrl = "https://data.geo.admin.ch/"

def GROUP = "Bundesdaten-Import"

federalDataSets.each { federalDataSet ->
    def dataSet = federalDataSet.toString()
    task "downloadFederalData_$dataSet"(type: Download) {
        group = GROUP
        description = "Download Bundesdatensatz: ${dataSet}"
        src federalBaseUrl + dataSet + "/data.zip"
        dest pathToTempFolder
        overwrite true
        
        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }

    task "unzipFederalData_$dataSet"(type: Copy, dependsOn: "downloadFederalData_$dataSet") {
        group = GROUP
        description = "Unzip Bundesdatensatz: ${dataSet}"
        from zipTree(pathToDataZip)
        into file(pathToUnzipFolder)
        include "**/*.xtf"

        // This is to get rid of the date appendix.
        rename { String fileName ->
            if (fileName.contains(dataSet)) {
                return dataSet+".xtf"
            }
            return fileName
        } 

        doLast {
            println "File unzipped to directory: " + pathToUnzipFolder
        }        
    }

    task "replaceFederalData_$dataSet"(type: Ili2pgReplace, dependsOn: "unzipFederalData_$dataSet") {
        group = GROUP
        description = "Import Bundesdatensatz: ${dataSet}"
        database = [dbUriOereb, dbUserOereb, dbPwdOereb]
        models = iliModelTransferstruktur
        dbschema = dbSchema
        dataFile = file(Paths.get(pathToUnzipFolder.toString(), dataSet + ".xtf"))
        dataset = dataSet
        disableValidation = true
    }
}

task replaceFederalData() {
    group = GROUP
    description = "Aggregationstask für das Importieren/Ersetzen sämtlicher Bundesdaten."
}

replaceFederalData.dependsOn {
    tasks.findAll { task -> task.name.startsWith('replaceFederalData_') }
}
